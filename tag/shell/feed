<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wklken's blog</title><link>http://wklken.me/</link><description></description><atom:link href="/tag/shell/feed" rel="self"></atom:link><lastBuildDate>Sat, 15 Sep 2012 00:00:00 +0800</lastBuildDate><item><title>如何进行shell脚本正确性测试</title><link>http://wklken.me/posts/2012/09/15/how-to-test-shell.html</link><description>&lt;p&gt;在实际工作中，需要对shell脚本进行正确性测试。&lt;/p&gt;
&lt;p&gt;如何用最快最有效的方式进行测试？&lt;/p&gt;
&lt;p&gt;很多开发的习惯是，二话不说，写完/拿到，就跑一把，看看输入，输出，想要的操作是否完成，也就过了。&lt;/p&gt;
&lt;p&gt;其实这是十分不严谨的，若是未经过QA，风险还是相当大的。&lt;/p&gt;
&lt;p&gt;以下即shell脚本测试流程，仅供参考&lt;/p&gt;
&lt;p&gt;1.代码走读：&lt;/p&gt;
&lt;p&gt;写完，或者拿到一个shell脚本，不必急于运行，虽然实践是检验整理的唯一标准，但是，在读代码这个过程中，可以规避很多低级的bug.&lt;/p&gt;
&lt;p&gt;读什么？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;代码逻辑，这个脚本用来做什么，主要分为多少步，分别做了什么事情？&lt;/span&gt;
  &lt;span class="err"&gt;用于检查是否有遗漏逻辑，或有悖于需求。&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;具体语法，变量，判断语句&lt;/span&gt;
  &lt;span class="err"&gt;语法方面的东西，变量是否定义，判断语句逻辑是否正确，是否考虑各种异常，错误是否退出，返回正确状态值等。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.语法检测：&lt;/p&gt;
&lt;p&gt;shell的语法还是相当让人无语的，很多很容易疏忽遗漏的地方&lt;/p&gt;
&lt;p&gt;命令格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若是没有异常输出，证明脚本没有明显的语法问题。&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_1.jpg?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;3.运行跟踪：&lt;/p&gt;
&lt;p&gt;实践是检验整理的唯一标准，跑一把。&lt;/p&gt;
&lt;p&gt;不过，可不是直接运行然后去看最终结果，这样会遗漏掉很多中间过程。&lt;/p&gt;
&lt;p&gt;命令格式:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vx&lt;/span&gt; &lt;span class="o"&gt;***&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得到效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img alt="运行结果" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_2.jpg?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到&lt;/p&gt;
&lt;p&gt;每行代码原始命令（无+的）:[这是-v的效果]&lt;/p&gt;
&lt;p&gt;代码执行时的情况（带+），包括运算结果，逻辑判断结果，变量赋值等等[-x的效果]&lt;/p&gt;
&lt;p&gt;而我们所要关注的就是这些信息，主要是变量值和逻辑判断结果。&lt;/p&gt;
&lt;p&gt;4.覆盖分支：&lt;/p&gt;
&lt;p&gt;直接跑，只能覆盖到主体流程，对于其他控制流分支的代码是无法覆盖到的。&lt;/p&gt;
&lt;p&gt;对于关键性的，重点的逻辑，我们需要制造条件，使运行脚本可以进入对应分支&lt;/p&gt;
&lt;p&gt;5.其他：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;关于&lt;/span&gt;&lt;span class="n"&gt;bashdb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;可以尝试下，但是感觉投入产出比不高&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;关于单元测试：&lt;/span&gt;
  &lt;span class="err"&gt;实际工作中，由于项目压力比较大，单元测试的成本还是相当高的，所以目前为止没有。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6.有没有更好的方式?&lt;/p&gt;
&lt;p&gt;好吧，单步跟踪，脚本短的还好，日志信息不会太多，要是多了，存在调用其他脚本等等.....&lt;/p&gt;
&lt;p&gt;日志量达到几千行，这是很轻易的事情。&lt;/p&gt;
&lt;p&gt;跟踪过的童鞋有同感，展现不够友好，惨白惨白一片，一千行下来，看的眼花。&lt;/p&gt;
&lt;p&gt;很容易遗漏（LZ被坑了好多回，你看，或不看......错误信息明明就在那里，就是视而不见）&lt;/p&gt;
&lt;p&gt;So.进行了一层优化，对日志进行处理，使用正则，标注我关心的信息&lt;/p&gt;
&lt;p&gt;效果图对比：&lt;/p&gt;
&lt;p&gt;&lt;img alt="原始图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_3.jpg?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="扩展图" src="https://github.com/wklken/gallery/blob/master/shell_test/shell_test_4.jpg?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;脚本是用python实现的，位置:https://github.com/wklken/pytools/tree/master/shell&lt;/p&gt;
&lt;p&gt;思想是：执行，抓到所有日志，用正则进行匹配，打上颜色，然后输出&lt;/p&gt;
&lt;p&gt;好了，就这些&lt;/p&gt;
&lt;p&gt;工具的实现是为了提高效率，节约时间。&lt;/p&gt;
&lt;p&gt;The end!&lt;/p&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;Gighub: https://github.com/wklken&lt;/p&gt;
&lt;p&gt;Blog: http://wklken.me&lt;/p&gt;
&lt;p&gt;2012-09-15&lt;/p&gt;
&lt;p&gt;转载请注明出处，谢谢！&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0800</pubDate><guid>tag:wklken.me,2012-09-15:posts/2012/09/15/how-to-test-shell.html</guid><category>python</category><category>shell</category></item></channel></rss>