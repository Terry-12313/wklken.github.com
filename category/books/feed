<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wklken's blog</title><link>http://wklken.me/</link><description></description><atom:link href="/category/books/feed" rel="self"></atom:link><lastBuildDate>Sun, 24 Nov 2013 00:00:00 +0800</lastBuildDate><item><title>读书笔记-程序员的职业素养</title><link>http://wklken.me/posts/2013/11/24/the-clean-coder.html</link><description>&lt;p&gt;作者：Robert C. Martin&lt;/p&gt;
&lt;p&gt;一本“方法论”的书，还是可以借鉴很多东西的,做了摘录&lt;/p&gt;
&lt;p&gt;讲了很多东西，涉及这个职业的方方面面&lt;/p&gt;
&lt;p&gt;目标是，成为“专业人士”&lt;/p&gt;
&lt;p&gt;每一节的标题还是有点作用的，摘录之&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;序&lt;/h3&gt;
&lt;p&gt;需要的不是“经历丰富的人”而是“有职业素养的人”&lt;/p&gt;
&lt;p&gt;相比问题本身，解决问题的方式、步骤以及反思深度都体现出一个人的职业素养&lt;/p&gt;
&lt;p&gt;职业素养: 它体现了能力和素质，又强调了持续的积累和养成&lt;/p&gt;
&lt;p&gt;技术人员需要如何改变才能被视为专业人士呢？&lt;/p&gt;
&lt;h3&gt;前言&lt;/h3&gt;
&lt;p&gt;专业，要变得有影响力，有说服力&lt;/p&gt;
&lt;h3&gt;引言&lt;/h3&gt;
&lt;p&gt;尝试定义专业程序员，成为真正专业的程序员，需要什么样的态度、原则、行动 (本书主旨)&lt;/p&gt;
&lt;h3&gt;第一章 专业主义&lt;/h3&gt;
&lt;p&gt;1.1 清楚你要什么&lt;/p&gt;
&lt;p&gt;"专业主义"，不但象征着荣誉与骄傲，而且明确意味着责任与义务&lt;/p&gt;
&lt;p&gt;1.2 担当责任&lt;/p&gt;
&lt;p&gt;尽职尽责&lt;/p&gt;
&lt;p&gt;1.3 首先，不行损害之事&lt;/p&gt;
&lt;p&gt;1.3.1 不要破坏软件的功能&lt;/p&gt;
&lt;p&gt;要做得专业，就不能留下bug&lt;/p&gt;
&lt;p&gt;要对自己的不完美负责&lt;/p&gt;
&lt;p&gt;所谓专业人士，就是能对自己犯下的错误负责的人，哪怕那些错误实际上是在所难免的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;让&lt;/span&gt;&lt;span class="n"&gt;QA&lt;/span&gt;&lt;span class="err"&gt;找不出任何问题&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;要确信代码正常运行&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="err"&gt;如何确保&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;测试，一遍遍测试&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;自动化测试&lt;/span&gt;
  &lt;span class="err"&gt;你写的每一行代码都要测试，完毕&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;自动化&lt;/span&gt;&lt;span class="n"&gt;QA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.3.2 不要破坏结构&lt;/p&gt;
&lt;p&gt;聪明人不会为了发布新功能而破快结构&lt;/p&gt;
&lt;p&gt;所有软件项目的根本指导原则是，软件要易于修改&lt;/p&gt;
&lt;p&gt;如果你希望自己的软件灵活可变，那就应该时常修改它: 要证明易于修改，唯一办法就是做些实际的修改&lt;/p&gt;
&lt;p&gt;"无情重构"，每次读、修改代码，就要比原来更简洁&lt;/p&gt;
&lt;p&gt;不要害怕修改代码，（有一套完整测试，你就根本不会害怕）&lt;/p&gt;
&lt;p&gt;1.4 职业道德&lt;/p&gt;
&lt;p&gt;职业发展是你自己的事&lt;/p&gt;
&lt;p&gt;将自己的职业发展寄希望于雇主的软件开发人员将会很惨&lt;/p&gt;
&lt;p&gt;"术业有专攻",需要投入时间去追求&lt;/p&gt;
&lt;p&gt;1.4.1 了解你的领域&lt;/p&gt;
&lt;p&gt;每个专业软件开发人员必须精通的事项(感觉有些可借鉴，并非全部)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;设计模式&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;设计原则。必须了解&lt;/span&gt;&lt;span class="n"&gt;SOLID&lt;/span&gt;&lt;span class="err"&gt;原则，而且要深刻理解组件设计原则&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;方法。必须了解&lt;/span&gt;&lt;span class="n"&gt;XP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Scrum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;精益&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;看板&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;瀑布&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;结构化分析&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;结构化设计&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="err"&gt;实践。&lt;/span&gt;&lt;span class="n"&gt;TDD&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;OOP&lt;/span&gt;&lt;span class="err"&gt;、结构化变成、持续集成和结对编程&lt;/span&gt;
&lt;span class="mf"&gt;5.&lt;/span&gt;&lt;span class="err"&gt;工件、&lt;/span&gt;&lt;span class="n"&gt;UML&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DFD&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;结构图&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Petri&lt;/span&gt;&lt;span class="err"&gt;网络图&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;状态迁移图表、流程图和决策表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.4.2 坚持学习&lt;/p&gt;
&lt;p&gt;读书，看相关文章，关注博客和微博，参加技术大会，访问用户群，多参与读书与学习小组&lt;/p&gt;
&lt;p&gt;不懂就学，不要畏难&lt;/p&gt;
&lt;p&gt;1.4.2 练习&lt;/p&gt;
&lt;p&gt;练习，指的是在日常工作之余专门练习技能，以期自我提升&lt;/p&gt;
&lt;p&gt;解决一些简单的编程问题&lt;/p&gt;
&lt;p&gt;1.4.4 合作&lt;/p&gt;
&lt;p&gt;1.4.5 辅导&lt;/p&gt;
&lt;p&gt;教学相长&lt;/p&gt;
&lt;p&gt;1.4.6 了解业务领域&lt;/p&gt;
&lt;p&gt;1.4.7 与雇主/客户保持一致&lt;/p&gt;
&lt;p&gt;1.4.8 谦逊&lt;/p&gt;
&lt;p&gt;专业人士都清楚自己的自负，不会故作谦逊&lt;/p&gt;
&lt;h3&gt;第二章 说不&lt;/h3&gt;
&lt;p&gt;专业人士敢于说明真相而不屈从于权势。专业人士有勇气对他们的经理说“不”&lt;/p&gt;
&lt;p&gt;2.1 对抗角色&lt;/p&gt;
&lt;p&gt;不靠谱的承诺是失职&lt;/p&gt;
&lt;p&gt;说不，然后找到双方都能接受的解决方案&lt;/p&gt;
&lt;p&gt;2.2 高风险时刻&lt;/p&gt;
&lt;p&gt;最要说“不”的时那些高风险的关键时刻&lt;/p&gt;
&lt;p&gt;2.3 要有团队精神&lt;/p&gt;
&lt;p&gt;恪尽职守，关心队友，提供帮助，最大可能做到尽职尽责&lt;/p&gt;
&lt;p&gt;有团队精神的人不会总是说“是”&lt;/p&gt;
&lt;p&gt;2.3.1 试试看&lt;/p&gt;
&lt;p&gt;没有“试试看”这回事&lt;/p&gt;
&lt;p&gt;许诺“尝试”，就意味着你承认自己之前未尽全力，承认自己还有余力可施，意味着你只要再加把劲还是可以达成目标的&lt;/p&gt;
&lt;p&gt;本质上，承诺“尝试”是一种不诚实的表现&lt;/p&gt;
&lt;p&gt;2.3.2 消极对抗&lt;/p&gt;
&lt;p&gt;直接交流沟通，而不是消极对抗&lt;/p&gt;
&lt;p&gt;2.4 说“是”的成本&lt;/p&gt;
&lt;p&gt;有时候，获取正确决策的唯一途径，便是勇敢无畏的说出“不”字。&lt;/p&gt;
&lt;p&gt;2.5 如何写出好代码&lt;/p&gt;
&lt;p&gt;专业人士常常成为英雄，但这样的荣誉并非他们所刻意追求的&lt;/p&gt;
&lt;p&gt;成为英雄与“解决问题”的诱惑诚然巨大，只是我们要明白，委屈专业原则以求全，并非问题的解决之道。舍弃这些原则，只会制造出更多的麻烦&lt;/p&gt;
&lt;p&gt;坚守专业原则&lt;/p&gt;
&lt;h3&gt;第三章 说“是”&lt;/h3&gt;
&lt;p&gt;3.1 承诺用语&lt;/p&gt;
&lt;p&gt;做出承诺，包含三个步骤&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;口头上说自己将会去做&lt;/span&gt;
&lt;span class="err"&gt;心里认真对待做出的承诺&lt;/span&gt;
&lt;span class="err"&gt;真正付诸行动&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当我们承诺某事时，必须认证对待承诺&lt;/p&gt;
&lt;p&gt;3.1.1 识别“缺乏承诺”的征兆&lt;/p&gt;
&lt;p&gt;一类词语&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;需要、应当&lt;/span&gt;
&lt;span class="err"&gt;希望、但愿&lt;/span&gt;
&lt;span class="err"&gt;让我们（不是让我）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.1.2 真正的承诺听起来是怎样的&lt;/p&gt;
&lt;p&gt;你，你自己，始终能掌控某些事情，也就是说，总有些事是你可以承诺做到的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;我将在&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="err"&gt;之前&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你对自己将会做某件事做了清晰的事实陈述，而且明确了完成期限&lt;/p&gt;
&lt;p&gt;之所以没成功&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;是因为我寄希望于某某去做这件事&lt;/span&gt;
&lt;span class="err"&gt;你只能承诺自己能完全掌控的事&lt;/span&gt;
&lt;span class="err"&gt;最终目标依赖与他人，那么就应该采取些具体行动，接近最终目标&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;是因为我不大确信是否真能完成得了&lt;/span&gt;
&lt;span class="err"&gt;即使目标无法完成，你仍能全力前进，离目标更近些&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;是因为有些时候我真的无能为力&lt;/span&gt;
&lt;span class="err"&gt;如果你无法兑现承诺，最重要的就是，尽早向你的承诺对象发出预警，越快越好，越早越好&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.2  学习如何说“是”&lt;/p&gt;
&lt;p&gt;3.2.1 “试试”的另一面&lt;/p&gt;
&lt;p&gt;3.2.2 坚守原则&lt;/p&gt;
&lt;p&gt;如果是专业人员，就不会放弃底线。&lt;/p&gt;
&lt;h3&gt;第四章 编码&lt;/h3&gt;
&lt;p&gt;4.1 做好准备&lt;/p&gt;
&lt;p&gt;智力活动&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;代码必须能够正常工作&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;代码必须能够帮你解决客户提出的问题&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;代码必须能和现有系统结合得天衣无缝&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="err"&gt;其他程序员必须能读懂你的代码&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.1.1 凌晨3点写出的代码&lt;/p&gt;
&lt;p&gt;疲劳的时候，千万不要写代码&lt;/p&gt;
&lt;p&gt;要确保自己已经将睡眠、健康和生活方式调整到最佳状况，这样才能在每天的8个小时里全力以赴&lt;/p&gt;
&lt;p&gt;4.1.2 焦虑时写下的代码&lt;/p&gt;
&lt;p&gt;专业开发人员善于合理分配个人时间，以确保工作时间段中尽可能富有成效。
在家中时，应该专门安排时间解决焦虑，这样就不会把焦虑情绪带到办公室里&lt;/p&gt;
&lt;p&gt;4.2 流态区&lt;/p&gt;
&lt;p&gt;意识高度专注，但思维视野收拢到狭窄的状态&lt;/p&gt;
&lt;p&gt;避免进入流态区！并非真的极为高效，也绝非毫无错误&lt;/p&gt;
&lt;p&gt;流态区写的代码可能会快些，但是后面你将不得不更多的回头重新审视这些代码&lt;/p&gt;
&lt;p&gt;切换思维、结对编程等&lt;/p&gt;
&lt;p&gt;4.2.1 音乐&lt;/p&gt;
&lt;p&gt;对不同人，音乐帮助不一样，不一定有助于编码&lt;/p&gt;
&lt;p&gt;4.2.2 中断&lt;/p&gt;
&lt;p&gt;礼貌地回应中断&lt;/p&gt;
&lt;p&gt;当然，要想办法减少中断&lt;/p&gt;
&lt;p&gt;4.2.3 阻塞&lt;/p&gt;
&lt;p&gt;不要干坐，找一些其他事情干&lt;/p&gt;
&lt;p&gt;或者，结对编程&lt;/p&gt;
&lt;p&gt;另一种方法：创造性输出依赖于创造性输入，增加自己知识体系的广度&lt;/p&gt;
&lt;p&gt;4.4 调试&lt;/p&gt;
&lt;p&gt;TDD?&lt;/p&gt;
&lt;p&gt;衡量你是否是一个专业人士的重要方面，能否将调试时间尽量降到最低&lt;/p&gt;
&lt;p&gt;4.5 保持节奏&lt;/p&gt;
&lt;p&gt;4.5.1 知道何时应该离开一会&lt;/p&gt;
&lt;p&gt;阻塞，疲倦等，让自己保持好节奏&lt;/p&gt;
&lt;p&gt;4.6 进度延迟&lt;/p&gt;
&lt;p&gt;三个考虑到多种因素的期限：乐观预估，标称预估，悲观预估&lt;/p&gt;
&lt;p&gt;4.6.1 期望&lt;/p&gt;
&lt;p&gt;调整和确认期望&lt;/p&gt;
&lt;p&gt;4.6.2 盲目冲刺&lt;/p&gt;
&lt;p&gt;坚持维持你的估算&lt;/p&gt;
&lt;p&gt;不要经受不住诱惑盲目冲刺&lt;/p&gt;
&lt;p&gt;4.6.3 加班加点&lt;/p&gt;
&lt;p&gt;不应该采用额外加班加点工作的方案，除非以下三个条件都能满足：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;你个人能挤出时间&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;短期加班，最多加班两周&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;你的老板要有后背元，以防止万一加班措施失败了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.6.4 交付失误&lt;/p&gt;
&lt;p&gt;最糟糕：明知道没有完成任务却宣称已经完成&lt;/p&gt;
&lt;p&gt;4.6.5 定义完成&lt;/p&gt;
&lt;p&gt;创建一个确切定义的“完成”标准&lt;/p&gt;
&lt;p&gt;4.7 帮助&lt;/p&gt;
&lt;p&gt;4.7.1 帮助他人&lt;/p&gt;
&lt;p&gt;清楚状态，腾出时间&lt;/p&gt;
&lt;p&gt;作为专业人士，要以能够随时帮助别人为荣&lt;/p&gt;
&lt;p&gt;4.7.2 接受他人的帮助&lt;/p&gt;
&lt;p&gt;要以乐于接受别人的帮助为荣&lt;/p&gt;
&lt;p&gt;同时药学会如何请求帮助&lt;/p&gt;
&lt;h3&gt;第五章 测试驱动开发&lt;/h3&gt;
&lt;p&gt;TDD,测试驱动开发，先写测试的编程&lt;/p&gt;
&lt;p&gt;5.1 此时已有定论&lt;/p&gt;
&lt;p&gt;TDD绝不仅仅是一种用于缩短编码周期的简单技巧&lt;/p&gt;
&lt;p&gt;此时已有定论：TDD是确切可行，并且，每个开发者都要适应和掌握TDD&lt;/p&gt;
&lt;p&gt;5.2 TDD的三项法则&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;在编写好失败单元测试之前，不要编写任何产品代码&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;只要有一个单元测试失败了，就不要再写测试代码；无法通过编译也是一种失败情况&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;产品代码恰好能够让当前失败的单元测试成功通过即可，不要多写&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.3 TDD的优势&lt;/p&gt;
&lt;p&gt;5.3.1 确定性&lt;/p&gt;
&lt;p&gt;代码有任何修改，都必须运行手头有的全部测试&lt;/p&gt;
&lt;p&gt;确定状态&lt;/p&gt;
&lt;p&gt;5.3.2 缺陷注入率&lt;/p&gt;
&lt;p&gt;TDD能够显著降低缺陷&lt;/p&gt;
&lt;p&gt;5.3.3 勇气&lt;/p&gt;
&lt;p&gt;拥有一套值得信赖的测试，便可完全打消对修改代码的全部恐惧。&lt;/p&gt;
&lt;p&gt;放手整理，代码变得更具有可塑性，可以安全地将之雕琢为简单而满意的结构&lt;/p&gt;
&lt;p&gt;5.3.4 文档&lt;/p&gt;
&lt;p&gt;单元测试即文档&lt;/p&gt;
&lt;p&gt;5.3.5 设计&lt;/p&gt;
&lt;p&gt;测试先行，会迫使你去考虑什么是好的设计&lt;/p&gt;
&lt;p&gt;事后测试只是一种防守，而先行测试是一种进攻&lt;/p&gt;
&lt;p&gt;5.3.6 专业人士的选择&lt;/p&gt;
&lt;p&gt;TDD是专业人士的选择&lt;/p&gt;
&lt;p&gt;5.4 TDD的局限&lt;/p&gt;
&lt;p&gt;TDD并非万能&lt;/p&gt;
&lt;p&gt;某些场合显得不切实际或不合适&lt;/p&gt;
&lt;h3&gt;第六章 练习&lt;/h3&gt;
&lt;p&gt;专业人士都需要借助专门的训练提升自己的技能&lt;/p&gt;
&lt;p&gt;6.1 引子&lt;/p&gt;
&lt;p&gt;6.1.1 10的22次方&lt;/p&gt;
&lt;p&gt;现在我们有更好的工具，更好的语言，但是，语句的本质并没有随时间而改变&lt;/p&gt;
&lt;p&gt;6.1.2 转变&lt;/p&gt;
&lt;p&gt;工作方式已经截然不同&lt;/p&gt;
&lt;p&gt;任何事情，要做得快，都离不开练习&lt;/p&gt;
&lt;p&gt;6.2 编程柔道场&lt;/p&gt;
&lt;p&gt;需要找一些东西，来做实际的练习&lt;/p&gt;
&lt;p&gt;6.3 自身经验的扩展&lt;/p&gt;
&lt;p&gt;会受限，即所解决问题的种类比较单一&lt;/p&gt;
&lt;p&gt;所以，要自己扩展&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;开源，提升技能的最好方式&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;自己规划，不要局限在公司的语言和平台&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6.4 结论&lt;/p&gt;
&lt;p&gt;无论如何，专业人士都需要练习&lt;/p&gt;
&lt;h3&gt;第七章 验收测试&lt;/h3&gt;
&lt;p&gt;7.1 需求的沟通&lt;/p&gt;
&lt;p&gt;7.1.1 过早精细化&lt;/p&gt;
&lt;p&gt;陷阱：过早精细化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;不确定原则&lt;/span&gt;
&lt;span class="err"&gt;需求完成得越精细，就越容易被忽视&lt;/span&gt;
&lt;span class="err"&gt;观察者效应&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;不确定原则：每次你想业务方提供一个功能，他们获取比之前更多的信息，反过来影响他们对整个系统的看法&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;预估焦虑&lt;/span&gt;
&lt;span class="err"&gt;所谓的预估，预估整个系统，对需求进行精确评估&lt;/span&gt;
&lt;span class="err"&gt;其实：即便拥有全面准确的信息，评估通常也会存在很大的变数&lt;/span&gt;
      &lt;span class="err"&gt;不确定原则，需求是一定会变化的，追求的那种精确是徒劳的&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7.1.2 迟来的模糊性&lt;/p&gt;
&lt;p&gt;推迟过早精细化的另一个问题，迟来的模糊性&lt;/p&gt;
&lt;p&gt;需求的模糊，带来分歧或争论&lt;/p&gt;
&lt;p&gt;7.2 验收测试&lt;/p&gt;
&lt;p&gt;业务方与开发方合作编写的测试，其目的在于确定需求已经完成&lt;/p&gt;
&lt;p&gt;7.2.1 “完成”的定义&lt;/p&gt;
&lt;p&gt;完成，就是完成&lt;/p&gt;
&lt;p&gt;完成意味着，所有代码都写完了，所有测试都通过了，QA和需求方已经认可。这，才是完成&lt;/p&gt;
&lt;p&gt;7.2.2 沟通&lt;/p&gt;
&lt;p&gt;验收测试的目的是沟通，澄清，精确化&lt;/p&gt;
&lt;p&gt;7.2.3 自动化&lt;/p&gt;
&lt;p&gt;手工测试成本太高，相比手动测试，自动化测试的成本非常低&lt;/p&gt;
&lt;p&gt;7.2.4 额外工作&lt;/p&gt;
&lt;p&gt;不要把测试看做额外工作，而应当看成节省时间和金钱的办法&lt;/p&gt;
&lt;p&gt;7.2.5 验收测试什么时候写，由谁来写&lt;/p&gt;
&lt;p&gt;理想状态下：业务方和QA协作编写，程序员检查是否有矛盾和冲突&lt;/p&gt;
&lt;p&gt;只需要确保测试者和开发者不是同一人&lt;/p&gt;
&lt;p&gt;7.2.6 开发人员的角色&lt;/p&gt;
&lt;p&gt;开发人员有责任把验收测试与系统联系起来，然后让这些测试通过&lt;/p&gt;
&lt;p&gt;7.2.7 测试的协商与被动推进&lt;/p&gt;
&lt;p&gt;身为专业的开发人员，与编写测试的人协商并改进测试是你的职责，绝不能被动接受测试&lt;/p&gt;
&lt;p&gt;7.2.8 验收测试和单元测试&lt;/p&gt;
&lt;p&gt;单元测试是程序员写给程序员的&lt;/p&gt;
&lt;p&gt;验收测试是业务方写给业务方的&lt;/p&gt;
&lt;p&gt;7.2.9 图形界面及其他复杂因素&lt;/p&gt;
&lt;p&gt;恰当地测试&lt;/p&gt;
&lt;p&gt;尽可能减少GUI测试&lt;/p&gt;
&lt;p&gt;7.2.10 持续集成&lt;/p&gt;
&lt;p&gt;保持持续集成系统的时刻运行&lt;/p&gt;
&lt;p&gt;7.3 结论&lt;/p&gt;
&lt;p&gt;要解决开发方和业务方沟通问题，有效的办法就是，编写自动化的验收测试&lt;/p&gt;
&lt;h3&gt;第八章 测试策略&lt;/h3&gt;
&lt;p&gt;每个专业的开发团队都需要一套好的测试策略&lt;/p&gt;
&lt;p&gt;8.1 QA应该找不到任何错误&lt;/p&gt;
&lt;p&gt;QA在团队中扮演需求规约定义者和特性描述者&lt;/p&gt;
&lt;p&gt;8.2 自动化测试金字塔&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;            &lt;span class="err"&gt;人工探索式测试&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;         &lt;span class="err"&gt;系统测试&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;       &lt;span class="err"&gt;集成测试&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;    &lt;span class="err"&gt;组件测试&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;单元测试&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8.2.1 单元测试&lt;/p&gt;
&lt;p&gt;在最低层次上定义系统&lt;/p&gt;
&lt;p&gt;单元测试可以做到90%以上的覆盖率&lt;/p&gt;
&lt;p&gt;开发人员&lt;/p&gt;
&lt;p&gt;8.2.2 组件测试&lt;/p&gt;
&lt;p&gt;验收测试的一种，针对系统的各个组件编写的&lt;/p&gt;
&lt;p&gt;QA和业务人员&lt;/p&gt;
&lt;p&gt;8.2.3 集成测试&lt;/p&gt;
&lt;p&gt;只能对那些组件很多的较大型系统才有意义&lt;/p&gt;
&lt;p&gt;测试组件装配到一起是否协调,是装配测试&lt;/p&gt;
&lt;p&gt;系统架构师或者主设计师&lt;/p&gt;
&lt;p&gt;8.2.4 系统测试&lt;/p&gt;
&lt;p&gt;针对真个击沉完毕的系统来运行的自动化测试,是最终的集成测试&lt;/p&gt;
&lt;p&gt;测试系统是否正确组装完毕，以及系统各个组件之间是否能正常交互&lt;/p&gt;
&lt;p&gt;系统架构师和技术负责人&lt;/p&gt;
&lt;p&gt;8.2.5 人工探索性测试&lt;/p&gt;
&lt;p&gt;人工，度系统进行深入研究和探索&lt;/p&gt;
&lt;p&gt;8.3 结论&lt;/p&gt;
&lt;p&gt;开发团队要和QA紧密配合，创建有单元测试，组件测试，集成测试，系统测试和探索式测试构成的测试体系&lt;/p&gt;
&lt;h3&gt;第九章 时间管理&lt;/h3&gt;
&lt;p&gt;9.1 会议&lt;/p&gt;
&lt;p&gt;关于会议，有两条真理&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;会议是必须的&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;会议浪费了大量的时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;专业开发人员同样清楚会议额的高昂成本。所以，如果会议没有现实且显著的成效，他们会主动拒绝&lt;/p&gt;
&lt;p&gt;9.1.1 拒绝&lt;/p&gt;
&lt;p&gt;邀请你参加会议的人并不负责管理你的时间，为时间负责的人只有你&lt;/p&gt;
&lt;p&gt;理智地使用时间，谨慎选择，应当参加哪些会议，礼貌拒绝哪些会议&lt;/p&gt;
&lt;p&gt;9.1.2 离席&lt;/p&gt;
&lt;p&gt;会议并不总按计划进行的&lt;/p&gt;
&lt;p&gt;如果会议然人厌烦，就离席(想个办法礼貌地退出来)&lt;/p&gt;
&lt;p&gt;9.1.3 确定议程与目标&lt;/p&gt;
&lt;p&gt;会议应当有清晰的议程，确定每个议题所花的时间，以及明确的目标&lt;/p&gt;
&lt;p&gt;9.1.4 立会&lt;/p&gt;
&lt;p&gt;站立会议&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;我昨天做了什么&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;今天打算做什么&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;我遇到了什么问题&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;9.1.5 迭代计划会议&lt;/p&gt;
&lt;p&gt;会议的节奏应该很快，简明扼要地讨论各个候选人物，然后决定是选择还是放弃&lt;/p&gt;
&lt;p&gt;会议是每轮迭代时间的5%以内&lt;/p&gt;
&lt;p&gt;9.1.6 迭代回顾和DEMO展示&lt;/p&gt;
&lt;p&gt;在迭代的末尾召开&lt;/p&gt;
&lt;p&gt;9.1.7 争论/反对&lt;/p&gt;
&lt;p&gt;凡事不能再5分钟内解决的争论，都不能靠辩说解决&lt;/p&gt;
&lt;p&gt;用数据说话&lt;/p&gt;
&lt;p&gt;9.2 注意力点数&lt;/p&gt;
&lt;p&gt;编程是需要持续投入精力和注意力的智力活动&lt;/p&gt;
&lt;p&gt;9.2.1 睡眠&lt;/p&gt;
&lt;p&gt;保证睡眠，好好睡上7小时&lt;/p&gt;
&lt;p&gt;9.2.2 咖啡因&lt;/p&gt;
&lt;p&gt;适度&lt;/p&gt;
&lt;p&gt;9.2.3 恢复&lt;/p&gt;
&lt;p&gt;在注意力不集中的时候，无法控制注意力，可以想办法花30到60分钟恢复&lt;/p&gt;
&lt;p&gt;9.2.4 肌肉注意力&lt;/p&gt;
&lt;p&gt;肌肉注意力有助于改善心智注意力&lt;/p&gt;
&lt;p&gt;定期训练肌肉注意力&lt;/p&gt;
&lt;p&gt;9.2.5 输入与输出&lt;/p&gt;
&lt;p&gt;平衡输入与输出&lt;/p&gt;
&lt;p&gt;9.3 时间拆分和番茄工作法&lt;/p&gt;
&lt;p&gt;25分钟高效工作+5分钟休息，每4个番茄钟休息30分钟&lt;/p&gt;
&lt;p&gt;25分钟内，可以拒绝任何干扰&lt;/p&gt;
&lt;p&gt;9.4 要避免的行为&lt;/p&gt;
&lt;p&gt;优先级错乱：提高某个任务优先级来借口推迟真正急迫的任务&lt;/p&gt;
&lt;p&gt;专业开发人员会评估每个人物的优先级，排除个人喜好和需求，按照真实的紧急程度来执行任务&lt;/p&gt;
&lt;p&gt;9.5 死胡同&lt;/p&gt;
&lt;p&gt;慎重的态度和积累的经验可以帮你避免某些死胡同，但无法避免所有&lt;/p&gt;
&lt;p&gt;在走入死胡同时，要迅速意识到，并有足够的勇气走回头路&lt;/p&gt;
&lt;p&gt;坑法则，The Rule of Holes：如果你掉进坑里，别挖&lt;/p&gt;
&lt;p&gt;9.6 泥潭&lt;/p&gt;
&lt;p&gt;泥潭会减慢你的速度，但不会让你彻底停下来&lt;/p&gt;
&lt;p&gt;泥潭不容易被发现&lt;/p&gt;
&lt;p&gt;发现自己深处泥潭还要固执前进，是最严重的优先级错乱&lt;/p&gt;
&lt;p&gt;9.7 结论&lt;/p&gt;
&lt;p&gt;专业的开发人员会用心管理自己的时间和注意力&lt;/p&gt;
&lt;h3&gt;第十章 预估&lt;/h3&gt;
&lt;p&gt;预估是软件开发热源面对的最简单、也是最可怕的活动之一&lt;/p&gt;
&lt;p&gt;10.1 什么是预估&lt;/p&gt;
&lt;p&gt;问题在于，不同人不同看法，业务方认为是承诺，开发方认为是猜测 &lt;/p&gt;
&lt;p&gt;10.1.1 承诺&lt;/p&gt;
&lt;p&gt;承诺是必须做到的。&lt;/p&gt;
&lt;p&gt;专业开发人员不随便承诺，除非他们确切知道可以完成&lt;/p&gt;
&lt;p&gt;10.1.2 预估&lt;/p&gt;
&lt;p&gt;预估是一种猜测。它不包含任何承诺的色彩，他不需要做任何约定&lt;/p&gt;
&lt;p&gt;大多数软件开发人员不擅长预估。&lt;/p&gt;
&lt;p&gt;预估不是个定数，预估的结果是一种概率分布&lt;/p&gt;
&lt;p&gt;10.1.3 暗示性承诺&lt;/p&gt;
&lt;p&gt;专业开发人员能够清楚区分预估和承诺，只有在确切知道可以完成的情况下，他们才会给出承诺&lt;/p&gt;
&lt;p&gt;另外，需要小心避免给出暗示性的承诺&lt;/p&gt;
&lt;p&gt;10.2 PERT&lt;/p&gt;
&lt;p&gt;计划评审技术&lt;/p&gt;
&lt;p&gt;三元分析法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="err"&gt;，乐观估计&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="err"&gt;，标称估计&lt;/span&gt; 
&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="err"&gt;，悲观估计&lt;/span&gt;

&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;是任务期望完成时间&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10.3 预估任务 &lt;/p&gt;
&lt;p&gt;德尔菲法：一组人集合起来，讨论某项任务，预估完成时间，然后重复“讨论-预估”的过程，直到意见统一&lt;/p&gt;
&lt;p&gt;10.4 大数定理&lt;/p&gt;
&lt;p&gt;把大任务切分成许多小任务，分开预估再加总，结果会比单独平谷大人物要准确很多&lt;/p&gt;
&lt;p&gt;10.5 结论&lt;/p&gt;
&lt;p&gt;懂得如何为业务人员提供可信的预估结果，以便做出计划&lt;/p&gt;
&lt;h3&gt;第十一章 压力&lt;/h3&gt;
&lt;p&gt;即使有压力，专业开发人员也会冷静果断。尽管压力不断增大，他依然会坚守所受的训练和纪律，他知道这是他赖以战胜有最后期限和承诺所带来压力感的最好方法&lt;/p&gt;
&lt;p&gt;11.1 避免压力&lt;/p&gt;
&lt;p&gt;在压力下保持冷静的最好方式，便是规避会导致压力的处境&lt;/p&gt;
&lt;p&gt;11.1.1 承诺&lt;/p&gt;
&lt;p&gt;避免不切实际的承诺&lt;/p&gt;
&lt;p&gt;11.1.2 保持整洁 &lt;/p&gt;
&lt;p&gt;快速前进确保最后期限的方法，便是保持整洁&lt;/p&gt;
&lt;p&gt;让系统、代码和设计尽可能简洁，就可以避免压力&lt;/p&gt;
&lt;p&gt;要尽力保持输出成功整洁干净&lt;/p&gt;
&lt;p&gt;11.1.3 危机中的纪律&lt;/p&gt;
&lt;p&gt;选择那些你在危急时刻依然会遵循的纪律原则，并且在所有工作中都遵守这些纪律。&lt;/p&gt;
&lt;p&gt;遵守这些纪律原则是避免陷入危机的最好途径&lt;/p&gt;
&lt;p&gt;11.2 应对压力&lt;/p&gt;
&lt;p&gt;11.2.1 不要惊慌失措&lt;/p&gt;
&lt;p&gt;放松下来，对问题深思熟虑&lt;/p&gt;
&lt;p&gt;努力寻找可以带来最好结果的路径，然后沿着那条路径以合理稳定的节奏前进&lt;/p&gt;
&lt;p&gt;11.2.2 沟通&lt;/p&gt;
&lt;p&gt;让你的团队和主管知道你正深陷困境之中&lt;/p&gt;
&lt;p&gt;11.2.3 依靠你的纪律原则&lt;/p&gt;
&lt;p&gt;当事情十分困难时，要坚信你的纪律原则&lt;/p&gt;
&lt;p&gt;11.2.4 寻求帮助&lt;/p&gt;
&lt;h3&gt;第十二章 协作&lt;/h3&gt;
&lt;p&gt;12.1 程序员与人&lt;/p&gt;
&lt;p&gt;12.1.1 程序员与雇主&lt;/p&gt;
&lt;p&gt;专业程序员的首要职责是满足雇主的需求&lt;/p&gt;
&lt;p&gt;专业程序员会花时间去理解业务&lt;/p&gt;
&lt;p&gt;12.1.2 程序员与程序员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;代码个体所有&lt;/span&gt;
&lt;span class="err"&gt;不正常团队的糟糕症状&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;协作性的代码共有权&lt;/span&gt;
&lt;span class="err"&gt;共有&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;结对&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;12.2 小脑&lt;/p&gt;
&lt;p&gt;专业人士会共同工作&lt;/p&gt;
&lt;p&gt;有些时候，单独工作是正确的。但是一般来说，和他人紧密协作，在大部分时间段中结对工作，是最好的做法&lt;/p&gt;
&lt;p&gt;12.3 结论&lt;/p&gt;
&lt;p&gt;一定要学会交流，和人们交流&lt;/p&gt;
&lt;h3&gt;第十三章 团队与项目&lt;/h3&gt;
&lt;p&gt;13.1 只是简单混合吗？&lt;/p&gt;
&lt;p&gt;13.1.1 有凝聚力的团队&lt;/p&gt;
&lt;p&gt;形成团队是需要时间的.&lt;/p&gt;
&lt;p&gt;团队成员首先需要建立关系。需要学习如何写作，需要了解彼此的批号，强项，弱项，最终，才能凝聚成团队&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;发酵期&lt;/span&gt; 
&lt;span class="err"&gt;成员克服个体差异，默契配合，彼此信任，形成真正有凝聚力的团队，是需要一定时间的&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;团队和项目，何者为先&lt;/span&gt;
&lt;span class="err"&gt;把项目分配给形成凝聚力的团队，而不是围绕项目来组件团队&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;13.1.2 如何管理有凝聚力的团队&lt;/p&gt;
&lt;p&gt;每个团队都有自己的速度。团队的速度，即是在一定时间段内团队能够完成的工作量&lt;/p&gt;
&lt;p&gt;13.1.3 项目承包人的困境&lt;/p&gt;
&lt;h3&gt;第十四章 辅导、学徒期与技艺&lt;/h3&gt;
&lt;p&gt;14.1 失败的学位教育&lt;/p&gt;
&lt;p&gt;14.2 辅导&lt;/p&gt;
&lt;p&gt;14.3 学徒期&lt;/p&gt;
&lt;p&gt;14.3.1 软件学徒期&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="err"&gt;大师&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="err"&gt;熟练工&lt;/span&gt;
&lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="err"&gt;学徒、实习生&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;14.3.2 现实情况&lt;/p&gt;
&lt;p&gt;程序员的水平是否能够提升和最终是否能够得到职位晋升，全视乎程序员自己的表现&lt;/p&gt;
&lt;p&gt;14.4 技艺&lt;/p&gt;
&lt;p&gt;技艺是工匠所持的精神状态&lt;/p&gt;
&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 24 Nov 2013 00:00:00 +0800</pubDate><guid>tag:wklken.me,2013-11-24:posts/2013/11/24/the-clean-coder.html</guid><category>books</category></item><item><title>读书笔记-拖拉一点也无妨</title><link>http://wklken.me/posts/2013/11/17/the-art-of-procrastination.html</link><description>&lt;p&gt;mac搞坏了，折腾一宿没搞定，试过N种方法，历时8个小时，结果把硬盘给装没了 &amp;gt;-&amp;lt;&lt;/p&gt;
&lt;p&gt;最后无奈，搞去苹果店修理，中间等了三个小时&lt;/p&gt;
&lt;p&gt;带上了nook，到公园里，坐树下，看了两本书&lt;/p&gt;
&lt;p&gt;facebook效应和这本&lt;/p&gt;
&lt;p&gt;只有一百来页&lt;/p&gt;
&lt;p&gt;作为一个完美主义者，有轻微强迫症和轻微拖延症&lt;/p&gt;
&lt;p&gt;感觉有些地方还是很有道理&lt;/p&gt;
&lt;p&gt;以下为一些核心的观点&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;结构化拖延法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个拖延人士，都会把必须要做的重要事情往后拖——利用这个消极特性，让它为你服务&lt;/p&gt;
&lt;p&gt;观点：爱拖延的任人极少什么都不做,只是逃避去做重要的事情&lt;/p&gt;
&lt;p&gt;结构化拖延法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;利用这种心态，给任务梳理一个结构&lt;/span&gt;
&lt;span class="err"&gt;将想要做的事情按重要性列个清单，写下来，最紧急最重要的排在前面&lt;/span&gt;
&lt;span class="err"&gt;将另外一些重要的事情排在后面&lt;/span&gt;

&lt;span class="err"&gt;完成这些任务，就会变成避免去做清单最上方任务的一种手段&lt;/span&gt;

&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;拖延的人变成有用的人&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;清单最开头几件事：1）它看似有明确的截止日期（但实际上没有），2）它看似重要得不得了（实际上不是）&lt;/p&gt;
&lt;p&gt;实际上是一种自我欺骗，但是有用：用一种性格缺陷去抵消另一种性格缺陷&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;拖延与完美主义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;完美主义导致了拖延&lt;/p&gt;
&lt;p&gt;要接受一个事实：没有完美，我们从来没有干过完美的事情，就连接近完美的事情也没有(停留在脑海里的幻想层面的东西)&lt;/p&gt;
&lt;p&gt;观点：对于一件无需做到完美的任务，就不去苛求完美（关于完美主义的幻想，浪费时间，影响情绪）&lt;/p&gt;
&lt;p&gt;验伤选择:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;根据紧急程度进行分类排列&lt;/span&gt;
&lt;span class="err"&gt;对于大多数事情，要做的时候，心里有数：做到“蛮好”就可以了，或许比“蛮好”再好一点，但是犯不着追求完美&lt;/span&gt;
&lt;span class="err"&gt;养成习惯，做事之前逼自己分析一下，看看“不那么完美”的代价有多大，做到“完美无缺”有多大意义&lt;/span&gt;

&lt;span class="err"&gt;很多事情，没那么完美也就足够了，不要等到任务过期&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;现在就开始做&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;待办事项清单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当日待办事项清单，列好，大任务拆分成小任务，每完成一个鼓励自己一下&lt;/p&gt;
&lt;p&gt;宏大的令人望而却步的大任务拆分成小的，没有那么吓人的任务&lt;/p&gt;
&lt;p&gt;把令人分心的事情也写下来，提醒自己不要去做&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;放点音乐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;音乐和情绪之间存在着直接的关联&lt;/p&gt;
&lt;p&gt;找到合适自己节奏的音乐(轻快的歌)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;电脑与拖延&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从某些方面，电脑是拖延者们的恩物,也是个祸害，因为人们太容易把时间浪费在毫无价值，又与手边任务毫不相干的事情上&lt;/p&gt;
&lt;p&gt;找到最好的方法，使用电脑——处理邮件的方式，处理IM，处理社交网络等等&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“平摊型“人士的呼吁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好吧，我是“叠放型”人士&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与敌人合作？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;和非拖延人士合作，去做一大堆相对没那么重要的事情，非拖延人士绝对不会抽时间做的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;额外福利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构化拖延者的额外福利：有时候，排在清单项顶头的重要事项会自动消失&lt;/p&gt;
&lt;p&gt;拖延是缺点，但并非是最糟糕的缺点，有时候，缺点也有额外福利&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你看拖延不顺眼？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构化拖延是一码事，故意做给其他人看，让他知道你不受他辖制又是另一回事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从哲学的角度替拖延说两句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nothing&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;wklken&lt;/p&gt;
&lt;p&gt;2013-11-17&lt;/p&gt;
&lt;p&gt;于深圳&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">wklken</dc:creator><pubDate>Sun, 17 Nov 2013 00:00:00 +0800</pubDate><guid>tag:wklken.me,2013-11-17:posts/2013/11/17/the-art-of-procrastination.html</guid><category>books</category></item></channel></rss>