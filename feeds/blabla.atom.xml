<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wklken's blog</title><link href="http://www.wklken.me/" rel="alternate"></link><link href="http://www.wklken.me/feeds/blabla.atom.xml" rel="self"></link><id>http://www.wklken.me/</id><updated>2015-05-02T00:00:00+08:00</updated><entry><title>关于知识管理工具的思考</title><link href="http://www.wklken.me/posts/2015/05/02/about-knowledge-manage-tools.html" rel="alternate"></link><updated>2015-05-02T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2015-05-02:posts/2015/05/02/about-knowledge-manage-tools.html</id><summary type="html">&lt;p&gt;毕业快四年了,  测试一年半, 后端开发两年半, 时间如梭.&lt;/p&gt;
&lt;p&gt;回顾这些年, 笔记什么的, 是一部漫长的&lt;code&gt;迁移&lt;/code&gt;史/血泪史, 如果能早些学习git/markdown等, 能早些了解到一些工具, 应该能省下不少时间吧.&lt;/p&gt;
&lt;p&gt;汇总整理下自己所使用过的知识管理工具&lt;/p&gt;
&lt;p&gt;工具的目标: 提升效率&lt;/p&gt;
&lt;p&gt;而我们的目的很简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便快速收集/记录/整理/沉淀&lt;/li&gt;
&lt;li&gt;快速搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="mywiki" src="/imgs/blabla/mywiki.png"/&gt;&lt;/p&gt;
&lt;h1 id="_1"&gt;手抄笔记&lt;/h1&gt;
&lt;p&gt;大学那段时间&lt;/p&gt;
&lt;p&gt;那时候, 学习&lt;code&gt;linux&lt;/code&gt;, 学习&lt;code&gt;vim&lt;/code&gt;,  学习&lt;code&gt;java/jsp/ssh....&lt;/code&gt;, 学习&lt;code&gt;xml&lt;/code&gt;等等, 大多数情况下, 都是看书+手抄笔记大法, 那时候完全没有意识去对知识进行组织和整理, 几年下来, 积累了各类笔记, 一大堆, 过年回家还发现当时学习java的六七本笔记, 还有oracle, 还有不知道什么时候做的c语言学习笔记(完全忘了).&lt;/p&gt;
&lt;p&gt;手抄, 现在回过头来, 费时费力, 效率极低, 但是就当时环境而言, 不失为一种好的做法(相对于啥都没记来说), &lt;code&gt;好记性不如烂笔头&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而且, 上课/参加培训等等, 都通过笔记来记录&lt;/p&gt;
&lt;p&gt;手抄的做法, 太过古老, 如果是非技术书籍, 抑或个人喜欢纸质书籍, 不失为一种好的做法. 但是技术书籍, 手抄太过低效, 不易整理, 更不易搜索, 看似积累了很多, 实际沉淀不多.&lt;/p&gt;
&lt;h1 id="word"&gt;word&lt;/h1&gt;
&lt;p&gt;到毕业做测试一年多, 那时大多数情况下是windows系统, 毕业那会刚刚把系统转到ubuntu, 但是工作环境主要还是windows, 用终端连接主机工作.&lt;/p&gt;
&lt;p&gt;正式参加工作, 虽然还经常买纸质书, 但是正儿八经系统啃书的机会相当少, 大部分是工作中碎片化学习的东西, 所以&lt;code&gt;手抄笔记&lt;/code&gt;完全从生活中消失了&lt;/p&gt;
&lt;p&gt;这时候, 开始有意识记录使用电脑记录, 以及整理汇总一些东西.&lt;/p&gt;
&lt;p&gt;这段时间, 系统性整理了linux &amp;amp; shell笔记/vim笔记等, 测试理论, python入门等等.  工作中还是svn, 对git完全没有概念,  更别说markdown了.&lt;/p&gt;
&lt;p&gt;这时候笔记以word形式归总在目录下, 通过金山快盘同步, 后来迁到dropbox了&lt;/p&gt;
&lt;p&gt;那时候evernote/有道笔记还刚刚火起, 对云端没有太多需求, 没怎么关注&lt;/p&gt;
&lt;p&gt;word记录, 相对手抄效率略高, 也方便整理复习, 搜索功能有限.&lt;/p&gt;
&lt;h1 id="-"&gt;有道笔记 - 印象笔记&lt;/h1&gt;
&lt;p&gt;学习markdown了, 也开始玩github, 这时候云笔记开始火了, 刚好, 开始玩微博, 对各种人各种关注, 天天刷微博, 这个习惯延续至今.&lt;/p&gt;
&lt;p&gt;其实用得最多的只有一个功能: 网页剪藏&lt;/p&gt;
&lt;p&gt;每个人都会经历这么一个阶段, 碰到各种资源信息, 疯狂收集, 不管有用没用, 先搞下来再说.&lt;/p&gt;
&lt;p&gt;然后, 发现有3000+剪藏, 微博上2000+收藏, 后来觉得有道不足够靠谱, 丢过笔记,  本着&lt;code&gt;折腾&lt;/code&gt;的信念, 开始迁移笔记, 3000+剪藏只能以尽量高效的方式废弃: &lt;code&gt;当前不涉及不会接触短期内也不会关注的不管好不好以后有没有用全部删掉&lt;/code&gt;, 这样, 完成了自己的折腾史.&lt;/p&gt;
&lt;p&gt;除了剪藏, 最大的功能就是云同步了, 公司电脑和家里电脑同步. 那时候还在用android机, 移动端记录的需求倒是不怎么强烈&lt;/p&gt;
&lt;p&gt;这期间, 明白了&lt;code&gt;资源再多, 无用就是无用&lt;/code&gt;, 心态上改变了, 微博停止了点&lt;code&gt;收藏&lt;/code&gt;, 那2000+收藏, 也就废弃了. 另外, 也开始进行&lt;code&gt;关注&lt;/code&gt;的整理, 获取有效而稳定的信息流.&lt;/p&gt;
&lt;p&gt;PS: 云笔记最坑的是同步, 然后你发现丢了.....还有, 同步, 你发现冲突了, 然后在两份文件里面diff......都经历过, 心塞&lt;/p&gt;
&lt;h1 id="-ulysess"&gt;印象笔记 - Ulysess&lt;/h1&gt;
&lt;p&gt;印象笔记, 用了一段时间, 这时候也换了&lt;code&gt;mac&lt;/code&gt;和&lt;code&gt;iphone&lt;/code&gt;, 以及后来&lt;code&gt;ipad&lt;/code&gt;, 开始随时记录.&lt;/p&gt;
&lt;p&gt;但是用了一段时间, 发现一个问题: 不支持markdown&lt;/p&gt;
&lt;p&gt;后来, 又有一个问题: 代码高亮也不支持&lt;/p&gt;
&lt;p&gt;后来的后来, 发现: 这编辑功能也太渣了吧&lt;/p&gt;
&lt;p&gt;这时候, 刚好博客都迁移到自己站点, 全markdown静态.&lt;/p&gt;
&lt;p&gt;想着技术部分的笔记是否有一个更好的编辑/展现方式.&lt;/p&gt;
&lt;p&gt;也正好, 这时候对mac app有着一股狂热, 虽然现在过去了, 但是当时刚刚使用mac, 感受到了好处, 开始折腾&lt;code&gt;各类工具&lt;/code&gt;, 正好碰上了&lt;code&gt;ulysess&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这时候, 感觉技术笔记迁移到上面会更好, 然后逐步迁移.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;no zuo no die&lt;/code&gt;,  展现不错, 支持markdown, 支持高亮, 对于外貌党来说, 很赞的&lt;code&gt;编辑器&lt;/code&gt;, 是的, 迁完之后, 才想起来, 这货是个编辑器, 不是&lt;code&gt;笔记&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;由于搜索太弱, 不支持多端等等情况, 年前有发生了一次全部笔记给我double了一份, 老天, 几百篇笔记都变成双份了. 我花了一整天时间手工删除重复笔记. (目测可能是icloud的锅)&lt;/p&gt;
&lt;p&gt;死心了, 接着迁移&lt;/p&gt;
&lt;h1 id="wiznote"&gt;WizNote&lt;/h1&gt;
&lt;p&gt;为知笔记, 口碑不错, 试用了几天&lt;/p&gt;
&lt;p&gt;支持markdown, 目测是云笔记系列为数不多能支持这个的.&lt;/p&gt;
&lt;p&gt;然后, 为了&lt;code&gt;弃用&lt;/code&gt; ulysess, 花了点时间迁移完(ulysess作为编辑器还是很赞的, 还在用).&lt;/p&gt;
&lt;p&gt;用着用着, 发现这markdown, 这剪藏, 似乎没有那么&lt;code&gt;理想&lt;/code&gt;, 体验不佳, 用得越多越感觉到&lt;/p&gt;
&lt;p&gt;这时候, 搬了一回家, 发现搬书, 完全是一个自虐的活. 而且很多大部头看过后都不在打开, 很多书被我脱水了也没有阅读价值了......开始转向电子书, 多看&lt;/p&gt;
&lt;p&gt;这时候, 开始思考.......然后, 迁移&lt;/p&gt;
&lt;h1 id="_2"&gt;分级的知识管理&lt;/h1&gt;
&lt;p&gt;后来, 到了现在的情况: 分级, 邮件/evernote/gollum&lt;/p&gt;
&lt;h4 id="1"&gt;1. 收集&lt;/h4&gt;
&lt;p&gt;要求: 方便, 阅读格式ok, 不丢&lt;/p&gt;
&lt;p&gt;选择: Evernote国际版, 有条件上个高级版, 别问我为啥不用印象笔记&lt;/p&gt;
&lt;p&gt;专门建立一个笔记本: Inbox, 对于碰到的感兴趣的东西, 一键剪藏, 或者分享到evernote, 简单直接有效, 这点是所有云笔记中做的最好的&lt;/p&gt;
&lt;p&gt;另外, 支持多看读书笔记同步, 感受到这个世界深深地温暖&lt;/p&gt;
&lt;p&gt;PS: 对于微博的处理, 额, 我现在是这么干的: "分享到-邮件", 给自己发邮件, 然后定期处理:), 很有效.(使用unibox, 同一个发件人的邮件都在一个对话窗口里面, 很好处理 )&lt;/p&gt;
&lt;h4 id="2"&gt;2. 整理&lt;/h4&gt;
&lt;p&gt;要求: 易用, 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, mindnode pro, gollum&lt;/p&gt;
&lt;p&gt;主要是一些点, 标注, 做思维导图&lt;/p&gt;
&lt;p&gt;对于观点/经验等等东西, 可以阅读梳理后, 放置到evernote&lt;/p&gt;
&lt;p&gt;对于技术类/干货类东西, 放evernote&lt;/p&gt;
&lt;h4 id="3"&gt;3. 沉淀&lt;/h4&gt;
&lt;p&gt;要求: 高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;沉淀是再次提取思考的过程, 还是evernote&lt;/p&gt;
&lt;p&gt;不过, 对于技术类东西, 其实对云同步要求不需要那么高, 所以选择了自建wiki, 写完markdown往目录一扔, 就可以在本地web server上看到, 搜索等等, 是对技术/代码沉淀的最佳工具&lt;/p&gt;
&lt;h4 id="4"&gt;4. 搜索&lt;/h4&gt;
&lt;p&gt;要求: 精准高效&lt;/p&gt;
&lt;p&gt;选择: evernote, gollum&lt;/p&gt;
&lt;p&gt;用一下就知道了&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;这完全是一部&lt;code&gt;折腾&lt;/code&gt;的血泪史, 只有不断经历, 才能进步, 进化, 最终找到适合自己的方式.&lt;/p&gt;
&lt;p&gt;没有最好的方法, 只有最合适的方法, 对工具同理, 所以在整个过程中, 还是建议, 明确自己的需求, 要解决的问题等, 多关注一些东西, 多尝试.&lt;/p&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;
&lt;p&gt;2015-05-12&lt;/p&gt;
&lt;p&gt;wklken 于深圳&lt;/p&gt;</summary><category term="blabla"></category></entry><entry><title>关于代码调试de那些事</title><link href="http://www.wklken.me/posts/2014/11/23/how-to-debug.html" rel="alternate"></link><updated>2014-11-23T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-11-23:posts/2014/11/23/how-to-debug.html</id><summary type="html">&lt;p&gt;写代码最完美的就是, 想清楚, 码, 运行, perfect, DONE, 下班.&lt;/p&gt;
&lt;p&gt;当然, 那是完美的状态. 大多数时候只存在于理想中.&lt;/p&gt;
&lt;p&gt;现实是, 我们会被各种坑, 被环境坑, 被语言坑, 被依赖坑, 被第三方库坑, 被编辑器坑, 被自己坑(三个月前的自己/昨天的自己/几分钟前的自己), 被数据库坑, 被缓存坑, 被队友坑(这个比较惨), 被需求变更坑(这个也是)......&lt;/p&gt;
&lt;p&gt;所以, 总是避免不了代码调试.&lt;/p&gt;
&lt;p&gt;今天顺带过了下&amp;lt;&amp;lt;想计算机科学家一样思考Python&amp;gt;&amp;gt;, 里面每一章最后都有关于调试的一些观点, 例如&lt;code&gt;阅读 - 深思 - 修改/运行/回退&lt;/code&gt;, 所以决定来写写关于代码调试的一些东西.&lt;/p&gt;
&lt;p&gt;其实, 代码调试是&lt;code&gt;论如何排查问题&lt;/code&gt;的一个过程, 根据一切蛛丝马迹, 推断出问题所在, 并消灭之.(破案的即视感)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sherlock" src="/imgs/blabla/debug.png"/&gt;&lt;/p&gt;
&lt;p&gt;下面是一些关于一些自己在写代码和调试的总结&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1"&gt;1.你得明白你在做什么, 保持清醒&lt;/h3&gt;
&lt;p&gt;代码调试有时候会让你陷入无尽的自我怀疑/迷茫/愤怒/沮丧/窘迫/挫败(无限负能量), 很容易被这些情绪左右, 不清醒, 陷入怀疑自我(一定是我调用的方式不对), 或者怀疑一切(一定是数据库问题, 不对, 缓存问题, 不对, 接口问题, 好像不对, 数据问题), 或者胡乱改代码(改-跑-错了-再改-跑-又错-再改, 传说中的随机行走编程), 或者......(挣扎吧......)&lt;/p&gt;
&lt;p&gt;此刻, 保持清醒的自我是非常重要的, 要明确: &lt;code&gt;我在做什么&lt;/code&gt;, &lt;code&gt;问题是什么症状&lt;/code&gt;, &lt;code&gt;原来逻辑是什么&lt;/code&gt;, &lt;code&gt;最有可能出问题的是哪里&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id="2"&gt;2.想清楚了再写代码&lt;/h3&gt;
&lt;p&gt;如果连需求是什么, 想要做什么都没整明白, 就吭哧吭哧开写, 意图在实践中摸索通向胜利的道路, 是很愚蠢的行为.&lt;/p&gt;
&lt;p&gt;需要去理解需求, 自己要做什么, 然后, 在大脑中构造, 现在有什么, 为了完成需求需要做什么, 完成大体的组成结构/步骤流程的思考后, 再着手去做.&lt;/p&gt;
&lt;p&gt;大到整体设计, 小到一个函数, 都可以这么处理&lt;/p&gt;
&lt;p&gt;例如, 遇到复杂问题, 可以先写注释, 完整所有函数整体设计, 然后再填充细节&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;def dosomething():
        &amp;ldquo;&amp;rdquo;&amp;rdquo;
        &amp;ldquo;&amp;rdquo;&amp;rdquo;
        # step1: call func test()

        # step2: parse url to 

        # step3: judge

        # step4: convert and return
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="3"&gt;3.关于&lt;code&gt;脚手架&lt;/code&gt;代码&lt;/h3&gt;
&lt;p&gt;在逻辑的关键位置, print/assert关键信息, 用于在调试中迅速确认问题. (一些中间值/状态/条件判断结果)&lt;/p&gt;
&lt;p&gt;当然, 信息除了&lt;code&gt;关键&lt;/code&gt;这个特性, 还需要足够&lt;code&gt;丰富&lt;/code&gt;和&lt;code&gt;显眼&lt;/code&gt;, 一遍一次性定位问题. (既要好看又要有用)&lt;/p&gt;
&lt;p&gt;你需要确定下如何用顺手的编辑器快速输入这些代码, 可以用各类语言的snippets&lt;/p&gt;
&lt;p&gt;例如, 在写python时候, 我很喜欢prt&lt;tab&gt;(k-vim自动补全), 快速插入一些需要的信息&lt;/tab&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;print "TRACK ================= result", type(result), result, result == "test"
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="4review"&gt;4.写完一段代码第一时间自己review一下&lt;/h3&gt;
&lt;p&gt;事实证明, review的效果比写完直接跑再来调, 效率高多了.&lt;/p&gt;
&lt;p&gt;刚写完一段代码, 思路还很清晰, 跳到开始, review过程中注意各类变量, 条件判断, 函数调用, 上下文, 一致性, 错误处理等, 花不了多少时间, 却能发现一些&lt;code&gt;显而易见&lt;/code&gt;的问题, 省下很多无谓的调试时间(没问题不需要调试!).&lt;/p&gt;
&lt;h3 id="5review"&gt;5.review中注意, 代码是&lt;code&gt;抠&lt;/code&gt;过来的么?&lt;/h3&gt;
&lt;p&gt;很多时候从其他地方copy代码过来(一行或几行, 有时候只是一个函数调用或一个判断), 但是很容易忘了根据当前情况修改一些必要的值, 导致问题&lt;/p&gt;
&lt;p&gt;例如函数调用, 这个地方调用参数可能跟你copy这行代码需要参数不一样, 但是放在这里并不会报错(一切运作正常), 最终结果并不对.....&lt;/p&gt;
&lt;p&gt;好了, 开始调试&lt;/p&gt;
&lt;h3 id="6"&gt;6.搞明白问题的表现是什么(症状)&lt;/h3&gt;
&lt;p&gt;运行代码, 报错了, 有些人会瞬切回编辑器, 开始改代码(作高效状)......&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;问题是: &lt;code&gt;报错提示你看了么, 看明白了么?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在大部分语言, 其报错提示已经很明显了, 精确到行/变量, 虽然整个异常栈信息可能很长(非常长), 但是都有其特征(在最前或在最后,或在中间靠后, 有关键字), 仔细看下报错信息, 精确制导才是王道.&lt;/p&gt;
&lt;p&gt;所以, 你需要从错误信息中先确认&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;错误类型
发生错误的地方
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很多语法问题可以根据这个信息直接定位&lt;/p&gt;
&lt;h3 id="7"&gt;7.调试过程中, 需要时刻注意&lt;/h3&gt;
&lt;p&gt;改的是不是正确的目录下正确的文件?(大坑)&lt;/p&gt;
&lt;p&gt;保存了么(编译了么)?(又一个坑)&lt;/p&gt;
&lt;p&gt;服务重启了么?&lt;/p&gt;
&lt;p&gt;跟数据库有没有关系/跟缓存有没有关系, 要不要清?&lt;/p&gt;
&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;以上问题, 随便碰上一个你都可能发现, 自己书写的代码和当前运行来调试的代码不一样.(会浪费你巨量的时间)&lt;/p&gt;
&lt;p&gt;自己调试半天怎么还是一样的结果&lt;/p&gt;
&lt;p&gt;我一直在修改, 但是没有什么区别(出现这种情况要自问一下了)&lt;/p&gt;
&lt;p&gt;可以显示在代码头部打印或者故意出错, 确认是同一套代码&lt;/p&gt;
&lt;h3 id="8"&gt;8.环境/数据一致性&lt;/h3&gt;
&lt;p&gt;当你发现在本地无法复现别人报过来的问题(在我电脑上是正常的), 这时候, 需要考虑是否是环境和数据的问题.&lt;/p&gt;
&lt;h3 id="9"&gt;9.先不要动代码, 假设代码是正确的&lt;/h3&gt;
&lt;p&gt;遇到问题, 不要急着修改代码, 需要假设, 代码是正确的, 然后去复现, 复现之后定位.&lt;/p&gt;
&lt;h3 id="10"&gt;10.首先要怀疑自己&lt;/h3&gt;
&lt;p&gt;你不能一旦代码跑不动就怀疑是别人的问题, 然后抛给别人, 这样做同样是很不负责任而且很愚蠢的.&lt;/p&gt;
&lt;p&gt;首先, 你需要怀疑自己, 排查问题, 当确定不是自己的问题之后, 将问题定位, 输入, 预期结果, 现在的异常结果都处理好, 生成一个问题, 抛给对应负责人.
(一切没有价值的怀疑都是无意义的)&lt;/p&gt;
&lt;p&gt;程序员都是好人, 每次都在想: &lt;code&gt;一定是我的问题&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="11"&gt;11.对于莫名其妙的问题, 多试几种情况&lt;/h3&gt;
&lt;p&gt;有时候碰上一些诡异的问题, 例如有一种情况的输入会报错, 这时候, 再跳过去修改代码前, 可以多尝试几种输入, 涉及边界/异常/正常等情况, 排除法, 精确制导.&lt;/p&gt;
&lt;p&gt;例如, 可以变换输入值的范围(扩大或缩小, 可能用二分法), 变换输入类型和格式&lt;/p&gt;
&lt;h3 id="12"&gt;12.先回到&lt;code&gt;正确的代码&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;如果这段代码是由于修改导致的, 可以注掉此次变更代码, 同样的输入再次验证定位&lt;/p&gt;
&lt;h3 id="13"&gt;13.如果一段代码是&lt;code&gt;没动过&lt;/code&gt;的代码&lt;/h3&gt;
&lt;p&gt;如果你确保&lt;code&gt;确实没动过&lt;/code&gt;, 此时, 先不要怀疑自己, 更大的可能是&lt;code&gt;别人的问题&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;可能情况: 依赖出了问题(调用函数返回数据不对/异常? 依赖请求挂了? &amp;hellip;&amp;hellip;), 数据出了问题(表结构变更/服务返回数据变更), 环境问题(数据库/缓存)&lt;/p&gt;
&lt;h3 id="14bug"&gt;14.bug总是倾向于集中出现在一起&lt;/h3&gt;
&lt;p&gt;很多时候, bug是扎堆的, 可以回忆下之前修改的地方, 确认问题.&lt;/p&gt;
&lt;h3 id="15"&gt;15.对于很长很长, 上&lt;code&gt;二分法&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;可能函数很长, 或者调用链很长, 不易调试.(光打调试信息就得打得手疼)&lt;/p&gt;
&lt;p&gt;找到关键变量, 上&lt;code&gt;二分法&lt;/code&gt;, 无上利器.&lt;/p&gt;
&lt;h3 id="16print-or-debug"&gt;16.print or debug?&lt;/h3&gt;
&lt;p&gt;个人偏好简单粗暴的&lt;code&gt;print&lt;/code&gt;, 主要是用的vim+sinppet, 快速高效.&lt;/p&gt;
&lt;p&gt;当然, 如果用IDE, 用   &lt;code&gt;debug&lt;/code&gt;吧&lt;/p&gt;
&lt;h3 id="17"&gt;17.十分十分诡异的问题&lt;/h3&gt;
&lt;p&gt;上&lt;code&gt;debug&lt;/code&gt;, 打断点, 一点点调试吧, 只能这样了.&lt;/p&gt;
&lt;h3 id="18"&gt;18.当一个问题超过半小时&lt;/h3&gt;
&lt;p&gt;歇一歇, 走动走动, 打个水, 呼吸下新鲜空气.&lt;/p&gt;
&lt;p&gt;这时候有利于脱出情境, 去掉挫败感/愤怒/迷信等&lt;/p&gt;
&lt;p&gt;很多时候突然灵感一到, 瞬间明了(这种感觉很奇妙)&lt;/p&gt;
&lt;h3 id="19google"&gt;19.关于google&lt;/h3&gt;
&lt;p&gt;有些错误信息, 如果觉得比较独特诡异, 可以google下, 你会找到更多的一些信息的.&lt;/p&gt;
&lt;h3 id="20"&gt;20.关于求助&lt;/h3&gt;
&lt;p&gt;实在搞不定, google大神也搞不定, 此时可能需要求助了.&lt;/p&gt;
&lt;p&gt;前提, 你自己能把问题想清楚, 并且逻辑清晰地描述出来.(什么业务什么位置的什么逻辑, 报错类型和报错信息, 输入输出, 迄今做了哪些尝试等等) 要学会聪明地问问题, 高效, 尊重自己也尊重别人.&lt;/p&gt;
&lt;p&gt;如果你自己都没整明白怎么问, 别人也无能为力.&lt;/p&gt;
&lt;p&gt;遇到很多人, 直接上来就一句&lt;code&gt;xxx出问题了&lt;/code&gt;, 没有前置条件后置结果中间症状......&lt;/p&gt;
&lt;p&gt;不过, 如果你会聪明地问, 那就放心大胆地问吧, 不用磨磨唧唧的, 程序员大都是善良的孩子.&lt;/p&gt;
&lt;h3 id="21"&gt;21.吃一堑长一智&lt;/h3&gt;
&lt;p&gt;被坑了就要总结总结, 有个记录, 不被同一个问题坑两次.&lt;/p&gt;
&lt;p&gt;如果被坑了就忘, 还需要去反复求助, 那这属于坑队友的行为(鄙视下)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;好了, 就这些:)&lt;/p&gt;</summary><category term="blabla"></category></entry><entry><title>后端不高兴——关于协作和沟通</title><link href="http://www.wklken.me/posts/2014/04/24/unhappy-about-cooperation-and-communication.html" rel="alternate"></link><updated>2014-04-24T00:00:00+08:00</updated><author><name>wklken</name></author><id>tag:www.wklken.me,2014-04-24:posts/2014/04/24/unhappy-about-cooperation-and-communication.html</id><summary type="html">&lt;p&gt;==================&lt;/p&gt;
&lt;p&gt;再过两月毕业三周年，回顾一下，突然想起了一些问题，顺手记录一下&lt;/p&gt;
&lt;p&gt;选择后端的原因之一，代码写得好一些，然后改需求的时候，刷刷刷改几行代码发布，然后泡杯茶站在前端同学后面看他们苦逼地改页面:)&lt;/p&gt;
&lt;p&gt;&lt;img alt="unhappy" src="/imgs/blabla/unhappyface.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;工作那么久，逐渐变得&amp;ldquo;冷血&amp;rdquo;，要学会说no，学会排期，学会去&amp;ldquo;降低&amp;rdquo;一些人的期望甚至是&amp;ldquo;无情&amp;rdquo;扼杀，所以或许初次合作会给人一种不&amp;ldquo;友好&amp;rdquo;的印象。&lt;/p&gt;
&lt;p&gt;但是在&amp;ldquo;友好&amp;rdquo;和&amp;ldquo;效率&amp;rdquo;，我选择了后者，记得当初很菜很菜的时候，我还是很&amp;ldquo;友好&amp;rdquo;的。(妈蛋，一天要处理N多问题，跟运营运维产品前端测试等等沟通，还得挤时间码代码测试发布上线，只能高效至上了)&lt;/p&gt;
&lt;p&gt;不扯了，归正题，聊一些平时沟通合作遇到的问题&lt;/p&gt;
&lt;p&gt;PS:这里后端偏指服务端开发，当然，问题普适于各个角色&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="1"&gt;1. 问问题的方式&lt;/h3&gt;
&lt;p&gt;之前在微博看见人说过的一个现象，再次提一下&lt;/p&gt;
&lt;p&gt;假如有人找你咨询一个问题&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;A: 在? (在么?/在不在?)
B: 额
A: xxx功能你知道么？
B: 知道
A: xxx有个功能有问题了，能帮看下么
B: 什么地方
A: xxxxxxxx
B: 算了你切个图过来吧
A: [图]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个，首先，可能我在写代码，闪动弹窗对有轻微强迫症的人来说，必须要点开的啊（妈蛋），然后，我即时响应了，可能由于你有事什么的，过一会回答，但是这个等待过程中我又很那去投入一件事，很容易投入没几分钟被打断...这几句对话可能跨度是几分钟，甚至几个钟头（跑去吃了个饭回来看到消息给才给回复，哥都快忘了），其次，我真的很吝啬打那么多字&amp;gt;_&amp;lt;#&lt;/p&gt;
&lt;p&gt;效率杀手之一&lt;/p&gt;
&lt;p&gt;最有效率的其实是：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;A: 在吗?xxx功能你知道么?现在有问题了，xxx异常，访问链接 http://xxxxxxx，截图如下
   （给力一点的还会圈起来标注说明）
B: ok，稍等我看下
.....
B: 已修复，验证下
A: 好的
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;感受下吧&lt;/p&gt;
&lt;p&gt;推荐一篇文章 &lt;a href="http://macshuo.com/?p=367"&gt;如何提问&lt;/a&gt; | 一本书 &lt;a href="http://book.douban.com/subject/20428922/"&gt;学会提问&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="2"&gt;2. 搞明白&amp;ldquo;这事谁的问题&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;当一个人发现一个问题的时候，总是很兴奋地，迫不及待想要证实&lt;/p&gt;
&lt;p&gt;然后就会有如下&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我登陆不上去【有时候是页面差异，系统操作失败等】&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;稍等，我看下&lt;/span&gt;
&lt;span class="err"&gt;三分钟后&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;后台正常，刚才重新走了一遍流程，没问题，&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="err"&gt;切图&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="err"&gt;你再试下，可能&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;问题&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;我忘改&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;了&lt;/span&gt;&lt;span class="sr"&gt;/登陆超时了/xxx了/&lt;/span&gt;&lt;span class="err"&gt;我忘记做&lt;/span&gt;&lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;操作了&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;吐血的问题，很多时候，都是自己机器的问题，可能是host/网络/浏览器/系统登陆等等因素导致的，但是大多数人已发现问题，总是认为是别人的问题(系统的问题)，然后迫不及待，然后，我们要花费时间来排查各个可能的问题，跳转N多机器，检查N多服务，而且，相信我，这个过程不会很有趣，而且问题本身的种类很难导致很难将其自动化....《论排查问题的复杂性》&lt;/p&gt;
&lt;p&gt;当然，如果是可以自动化而你偏偏要每次人肉查而且乐在其中，那我没办法了。&lt;/p&gt;
&lt;p&gt;后来就变成&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="err"&gt;系统是不是挂了，我点发布了但是前台没更新&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;重做一遍，&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="err"&gt;分钟后没更新通知我&lt;/span&gt; &lt;span class="err"&gt;【够冷血吧】&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这类问题次数少也就忍了，担心的是对应人员新人进来的时候，没有老员工带或者培训，那么系统开发者往往一次又一次成为&amp;ldquo;义务培训导师&amp;rdquo;.....&lt;/p&gt;
&lt;p&gt;另外遇到问题也要忍住证实的欲望，先自己确认下&lt;/p&gt;
&lt;p&gt;有一本书推荐《你的灯亮着么》&lt;/p&gt;
&lt;h3 id="3-suprise"&gt;3. Suprise&lt;/h3&gt;
&lt;p&gt;后端最讨厌的是suprise，安排和做事情的节奏都会被打乱。&lt;/p&gt;
&lt;p&gt;我的原则是，不接受&amp;amp;unhappy，紧急的会去配合做，当然心情不会happy&lt;/p&gt;
&lt;p&gt;方案设计，评审，开发，测试那么多环节都没发现，要上线前，需求变更或者xxx有问题，suprise&lt;/p&gt;
&lt;p&gt;然后，上线时间有时候又是固定的，所以必须要配合处理&lt;/p&gt;
&lt;p&gt;当然，作为一枚&amp;ldquo;有责任感&amp;rdquo;的后端，肯定都会全力配合处理，不高兴是一回事，把事情完美地搞完是一回事。&lt;/p&gt;
&lt;p&gt;但这时候，往往会发现，时间不等人，所有人都盯着你，瞬间亚历山大，如果没搞好还很容易成为&amp;ldquo;责任人&amp;rdquo;，延期什么的很容易落到你头上，属于吃力不讨好的角色，前期按时完成，suprise却要背负所有，心里瞬间失衡(╯‵□&amp;prime;)╯︵┻━┻&lt;/p&gt;
&lt;p&gt;问题是，这个suprise的来源. 才是问题所在，更多的应该反思这里，否则很容易造成后续合作困难。&lt;/p&gt;
&lt;p&gt;另外，suprise很容易导致黑逻辑、补丁、牛皮糖、硬编码等等，将一块干净的自留地变成垃圾桶，而且破窗理论，所以，要控制。&lt;/p&gt;
&lt;h3 id="4"&gt;4. 要明白一个道理&lt;/h3&gt;
&lt;p&gt;1个人1个月能干好一件事情，不代表30个人在1天能把这件事做了&lt;/p&gt;
&lt;p&gt;很简单的一个道理，但是很容易被人忽视&lt;/p&gt;
&lt;h3 id="5"&gt;5. 关于估时间&lt;/h3&gt;
&lt;p&gt;后端需要信任，虽然我们有时候估时间不大准，但是基本都能在少于估算的时间内完成，超过的情况并不多。&lt;/p&gt;
&lt;p&gt;而且随着工作经验积累，估算时间会越来越准。(三小时就是三小时，额，上下误差几分钟)&lt;/p&gt;
&lt;p&gt;一般问题过来，很简单顺手做了，复杂的会给个完成时间。&lt;/p&gt;
&lt;p&gt;不要站在自己的角度去给后端的估时间，常见的理由是：&amp;ldquo;就简单加一个xxx&amp;rdquo;，&amp;ldquo;修改一下而已&amp;rdquo;等，你要知道有些系统并没有那么简单，你要的可能是一个现在能用的东西，但我们需要一个以后无论怎么改都好改而且能用的东西。（相信我，差异很大），同理，不要估工作量啊（2天的量估0.5天，要做完，那另外1.5天怎么破，哥做不到&amp;gt;_&amp;lt;）&lt;/p&gt;
&lt;p&gt;记住，除非火烧眉毛，否则，能在承诺完成时间内搞定的，不要催。&lt;/p&gt;
&lt;p&gt;我们需要的是冷静和清晰的思路。催促和打断于事无补。&lt;/p&gt;
&lt;h3 id="6"&gt;6. 上帝，同一时间内有且仅只有一个&lt;/h3&gt;
&lt;p&gt;所有人，都认为自己的需求优先级最高。&lt;/p&gt;
&lt;p&gt;对后端来说，合作和沟通的每个人都是上帝。&lt;/p&gt;
&lt;p&gt;但是要记住，上帝，同一时刻内只有一个。&lt;/p&gt;
&lt;p&gt;所以，有了优先级这一说，会排期，一次只做一件事。&lt;/p&gt;
&lt;p&gt;再给力的后端也不是超人，一次处理N件事情效率很低容易出错，非常不明智的&lt;/p&gt;
&lt;p&gt;所以，要学会接受排期，除非排的时间不合理要去沟通。&lt;/p&gt;
&lt;p&gt;你会发现，在截止日期到来的前一刻，后端小伙伴的东西已经搞完提供了。&lt;/p&gt;
&lt;h3 id="7-im"&gt;7. 合理使用项目管理工具/邮件/IM/电话&lt;/h3&gt;
&lt;p&gt;综合使用工具进行沟通&lt;/p&gt;
&lt;p&gt;涉及项目跟踪通知等，请用项目管理工具(目前tower)&lt;/p&gt;
&lt;p&gt;极重要事情，请邮件&lt;/p&gt;
&lt;p&gt;极紧急事情，请当面，或者电话&lt;/p&gt;
&lt;p&gt;其他，IM&lt;/p&gt;
&lt;p&gt;小事，确认，疑问，突发奇想？灵机一动？等等，注意除非这个沟通有可能导致你必须要去等，否则不到万不得已不要杀过去打断一个程序员的思路。&lt;/p&gt;
&lt;p&gt;打断是效率杀手，如果不用电话，那恕我只能定期去查，异步回复，所以就不要傻等。&lt;/p&gt;
&lt;h3 id="8"&gt;8. 被开会&lt;/h3&gt;
&lt;p&gt;不重要的会议不要勾选抄送我，谢谢&lt;/p&gt;
&lt;p&gt;冗长无聊相关性不大的会议允许早退，或者过了跟自己相关的部分允许早退&lt;/p&gt;
&lt;p&gt;超紧急临时会议，没问题&lt;/p&gt;
&lt;p&gt;其他临时会议，没提前发邀约提前通知的会议都是耍流氓，要知道本来用来码代码的两小时被突如其来的会议占用，打乱了计划安排，那么晚上就得花一个小时加班补回来【别问我为啥是一个小时】&lt;/p&gt;
&lt;h3 id="9"&gt;9. 拿到承诺&lt;/h3&gt;
&lt;p&gt;如果有一件事，你提给后端，不说明问题，优先级，截止时间，或者，压根你就扔给后端就不管了。（被动等待会等到海枯石烂的）&lt;/p&gt;
&lt;p&gt;然后你期望他把事情给做了，把结果给你，或者将事情跟完。很多时候，这都是你的幻想。&lt;/p&gt;
&lt;p&gt;如果我们没做出承诺，可能这件事情就被排后了，至于完成的时间，完全与取决于工作安排和工作量。&lt;/p&gt;
&lt;p&gt;所以，一般提给后端的时候，可以多问一句，&amp;ldquo;什么时候能搞定&amp;rdquo;，拿到承诺，一般没问题了。&lt;/p&gt;
&lt;h3 id="10"&gt;10. 当面沟通时提供上下文&lt;/h3&gt;
&lt;p&gt;遇到次数不多，但是还是会遇到，干活中都是有&amp;ldquo;状态&amp;rdquo;的&lt;/p&gt;
&lt;p&gt;有时候在做一件事情，一半&lt;/p&gt;
&lt;p&gt;然后例如这样&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 啊？（脑补痴呆状）
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者这样&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;A: 把xxx字段改成xxxx.... blablablabla.......

B: 不合适吧，xxxxxxx.......

A: 我在说xx问题

B: 我以为你说XXX问题
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实可以这样:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;A: 关于xx的问题，我们..........
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;你要相信，大部分后端都是善良的孩子......&lt;/p&gt;
&lt;p&gt;而且大部分后端，一个人干N个人的活(N&amp;gt;=2), (╯‵□&amp;prime;)╯︵┻━┻&lt;/p&gt;</summary><category term="blabla"></category></entry></feed>